import tkinter as tk

# Manuell definierte F√§cher und Zeiten
subjects_data = {
    "Semester 1": [
        {"Fach": "Mathe 1", "Tag": "Donnerstag", "Zeit": "16:00 - 17:30", "Raum": "A-1-04"},
        {"Fach": "Mathe 1", "Tag": "Donnerstag", "Zeit": "17:45 - 19:15", "Raum": "A-1-04"},
        {"Fach": "Programmierung 1 (A-H)", "Tag": "Montag", "Zeit": "08:15 - 09:45", "Raum": "E-1-05 PC-Labor"},
        {"Fach": "Programmierung Kurs 2 (I-Z)", "Tag": "Mittwoch", "Zeit": "10:00 - 11:30", "Raum": "E-E-04 PC-Labor IT"},
        {"Fach": "Business and Technical English", "Tag": "Freitag", "Zeit": "08:15 - 09:45", "Raum": "E-1-06 Sprache 2"},
        {"Fach": "Business and Technical English", "Tag": "Dienstag", "Zeit": "11:45 - 13:15", "Raum": "E-1-06 Sprache 2"},
        {"Fach": "Informatik", "Tag": "Dienstag", "Zeit": "10:00 - 11:30", "Raum": "A-E-18"},
        {"Fach": "Einf√ºhrung in die Wirtschaftsinformatik (V)", "Tag": "Mittwoch", "Zeit": "11:45 - 13:15", "Raum": "E-1-05 PC-Labor"},
        {"Fach": "Einf√ºhrung in die Wirtschaftsinformatik (√ú) Kurs 1 (A-H)", "Tag": "Montag", "Zeit": "10:00 - 11:30", "Raum": "E-1-05 PC-Labor"},
        {"Fach": "Einf√ºhrung in die Wirtschaftsinformatik Kurs 2 (I-Z)", "Tag": "Dienstag", "Zeit": "14:15 - 15:45", "Raum": "E-1-05 PC-Labor"},
        {"Fach": "Allgemeine Betriebswirtschaftslehre", "Tag": "Montag", "Zeit": "14:15 - 15:45", "Raum": "A-E-20"},
        {"Fach": "Allgemeine Betriebswirtschaftslehre", "Tag": "Donnerstag", "Zeit": "14:15 - 15:45", "Raum": "A-1-17"},
    ],
    "Semester 3": [
        {"Fach": "Investition und Finanzierung", "Tag": "Donnerstag", "Zeit": "08:15 - 09:45", "Raum": "A-E-08 1"},
        {"Fach": "Wissenschaftliches Arbeiten", "Tag": "Montag", "Zeit": "11:45 - 13:15", "Raum": "E-2-02"},
        {"Fach": "Kostenrechnung und Grundlagen Controlling", "Tag": "Dienstag", "Zeit": "11:45 - 13:15", "Raum": "A-E-20"},
        {"Fach": "Wissenschaftliches Arbeiten", "Tag": "Montag", "Zeit": "14:15 - 15:45", "Raum": "E-2-02"},
        {"Fach": "Digitale Kompetenzen", "Tag": "Dienstag", "Zeit": "14:15 - 15:45", "Raum": "A-E-08"},
        {"Fach": "Management betrieblicher Informationssysteme", "Tag": "Donnerstag", "Zeit": "14:15 - 15:45", "Raum": "E-E-06 PC-Labor Mul"},
        {"Fach": "Kostenrechnung und Grundlagen Controlling", "Tag": "Freitag", "Zeit": "16:00 - 17:30", "Raum": "B-2-06"},
    ],
}

selected_modules = []


def toggle_module_selection(subject, semester, var):
    module_info = {
        "Fach": subject["Fach"],
        "Tag": subject["Tag"],
        "Zeit": subject["Zeit"],
        "Raum": subject["Raum"],
        "Semester": semester,
    }
    if var.get() == 1:
        selected_modules.append(module_info)
    else:
        selected_modules.remove(module_info)

def generate_schedule():
    if not selected_modules:
        result_label.config(text="Bitte mindestens ein Modul ausw√§hlen!", fg="red")
        return

    # Clear the previous schedule
    for widget in schedule_frame.winfo_children():
        widget.destroy()

    # Create a canvas and scrollbar for the schedule
    schedule_canvas = tk.Canvas(schedule_frame)
    schedule_scrollbar = tk.Scrollbar(schedule_frame, orient=tk.VERTICAL, command=schedule_canvas.yview)
    schedule_scrollable_frame = tk.Frame(schedule_canvas)

    schedule_scrollable_frame.bind(
        "<Configure>",
        lambda e: schedule_canvas.configure(scrollregion=schedule_canvas.bbox("all"))
    )

    schedule_canvas.create_window((0, 0), window=schedule_scrollable_frame, anchor="nw")
    schedule_canvas.configure(yscrollcommand=schedule_scrollbar.set)

    schedule_canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
    schedule_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    # Create the header for the table
    days = ["Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag"]
    time_slots = ["08:15 - 09:45", "10:00 - 11:30", "11:45 - 13:15", "14:15 - 15:45", "16:00 - 17:30", "17:45 - 19:15"]

    table = {day: {time: [] for time in time_slots} for day in days}

    # Populate the table with selected modules
    for module in selected_modules:
        table[module["Tag"]][module["Zeit"]].append(module)

    # Create the table header
    header = tk.Frame(schedule_scrollable_frame)
    header.grid(row=0, column=0, columnspan=len(days) + 1)

    tk.Label(header, text="Zeit", borderwidth=1, relief="solid", width=15, anchor="center").grid(row=0, column=0)
    for idx, day in enumerate(days):
        tk.Label(header, text=day, borderwidth=1, relief="solid", width=20, anchor="center").grid(row=0, column=idx + 1)

    # Fill in the table rows
    for row_idx, time in enumerate(time_slots):
        tk.Label(schedule_scrollable_frame, text=time, borderwidth=1, relief="solid", width=15, anchor="center").grid(row=row_idx + 1, column=0)

        for col_idx, day in enumerate(days):
            cell = tk.Frame(schedule_scrollable_frame, borderwidth=1, relief="solid", width=15, height=5)
            cell.grid_propagate(False)
            cell.grid(row=row_idx + 1, column=col_idx + 1, sticky="nsew")

            if table[day][time]:
                text = "\n".join([f"{m['Fach']} ({m['Raum']})" for m in table[day][time]])
                color = "red" if len(table[day][time]) > 1 else "white"
                label = tk.Label(cell, text=text, bg=color, wraplength=100, justify="center")
                label.pack(expand=True, fill="both")


app = tk.Tk()
app.title("üíï Stundenplan-Generator üíï")
app.geometry("1200x800")
app.configure(bg="#FFC0CB")  # Rosa Hintergrund

# Begr√º√üungstext
welcome_label = tk.Label(app, text="üå∏ WINF Stundenplan-Generator üå∏", font=("Comic Sans MS", 20, "bold"), bg="#FFC0CB", fg="#800080")
welcome_label.pack(pady=10)

# Selection Frame
selection_frame = tk.Frame(app)
selection_frame.pack(fill=tk.BOTH, expand=True, pady=10)

canvas = tk.Canvas(selection_frame, height= 200) # Nach dem das Stundenplan generiert wird √§ndert sich die gr√∂√üe auf 200
scrollbar = tk.Scrollbar(selection_frame, orient=tk.VERTICAL, command=canvas.yview) #Vertikaler Scrollbar praktischer
scrollable_frame = tk.Frame(canvas)

scrollable_frame.bind(
    "<Configure>",
    lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
)

canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
canvas.configure(yscrollcommand=scrollbar.set)

canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

# Dynamische Anzeige der Semester und Module
for semester, subjects in subjects_data.items():
    frame = tk.LabelFrame(scrollable_frame, text=semester, padx=15, pady=15)
    frame.pack(fill=tk.BOTH, padx=25, pady=5)

    for subject in subjects:
        var = tk.IntVar()
        checkbox = tk.Checkbutton(
            frame,
            text=f"{subject['Fach']} ({subject['Tag']}, {subject['Zeit']}, {subject['Raum']})",
            variable=var,
            command=lambda subj=subject, sem=semester, v=var: toggle_module_selection(subj, sem, v),
        )
        checkbox.pack(anchor="w")

# Button zur Stundenplan-Erstellung
generate_button = tk.Button(app, text="üìù Stundenplan generieren üìù", font=("Comic Sans MS", 14),
                            bg="#FFC0CB", fg="#800080", activebackground="#FF1493", activeforeground="white",
                            relief="raised", bd=3, command=generate_schedule)
generate_button.pack(pady=10)

# Schedule Frame
schedule_frame = tk.Frame(app)
schedule_frame.pack(fill=tk.BOTH, expand=True, pady=10)

result_label = tk.Label(app, text="", fg="red")
result_label.pack()

app.mainloop()
